#!/usr/bin/env babel-node
// @flow

import chalk from 'chalk';
import { readFileSync } from 'fs';

import parse from '../src/parser';

const indent = (text: string): string =>
  text
    .split('\n')
    .map(s => `    ${s}`)
    .join('\n');

const NUM_CONTEXT_LINES_BEFORE = 2;
const NUM_CONTEXT_LINES_AFTER = 3;

// Read SQL from stdin (= 0) as a string
const sql = readFileSync(0).toString();

// eslint-disable-next-line no-console
const log = console.log;
// eslint-disable-next-line no-console
const error = console.error;

/**
 * Prints parser errors nicely
 */
const printErr = (e: Error) => {
  if (!e.location) {
    // Likely not a parser error
    error(chalk.red(e.toString()));
    return;
  }

  const lines = sql.split('\n');
  const start = e.location.start;
  const end = e.location.end;
  const before = lines.slice(
    start.line - 1 - NUM_CONTEXT_LINES_BEFORE,
    start.line - 1,
  );
  const line = lines[start.line - 1];
  const after = lines.slice(start.line, start.line + NUM_CONTEXT_LINES_AFTER);
  const offset = start.column;
  error(chalk.red(`Error: ${e.message}`));
  error('');
  error(indent(chalk.gray(before.join('\n'))));
  error(indent(chalk.white(line)));
  error(
    indent(
      ' '.repeat(offset - 1) +
        chalk.yellow(
          '^'.repeat(end.line !== start.line ? 1 : end.column - start.column),
        ),
    ),
  );
  error(indent(chalk.gray(after.join('\n'))));
  error('');
};

function main() {
  try {
    const result = parse(sql);
    log(JSON.stringify(result, null, 2));
  } catch (e) {
    printErr(e);
    process.exit(1);
  }
}

main();

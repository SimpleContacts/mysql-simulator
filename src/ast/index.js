// @flow strict

/**
 * This file is AUTOMATICALLY GENERATED.
 * DO NOT edit this file manually.
 *
 * Instead, update the `*.grammar` file, and re-run `generate-ast`
 */

import invariant from 'invariant';

import type { Encoding } from './encodings';
import type { Precision } from './types';

export type Direction = 'ASC' | 'DESC';
export type GeneratedColumnMode = 'STORED' | 'VIRTUAL';
export type IndexKind = 'NORMAL' | 'UNIQUE' | 'FULLTEXT';
export type IndexType = 'BTREE' | 'HASH';
export type MatchMode = 'MATCH' | 'FULL' | 'PARTIAL' | 'SIMPLE';
export type ReferenceOption = 'RESTRICT' | 'CASCADE' | 'SET NULL' | 'NO ACTION' | 'SET DEFAULT';

export type UnaryOp = '+' | '-' | '!' | 'is null' | 'is not null';

type BooleanOp = 'AND' | 'OR' | 'XOR';
type CmpOp = '=' | '<=>' | '!=' | '<>' | '>=' | '<=' | '<' | '>' | 'LIKE' | 'REGEXP' | 'RLIKE';
type ArithmOp = '+' | '-' | '*' | '/' | '%' | 'DIV';
export type BinaryOp = BooleanOp | CmpOp | ArithmOp;

function isAlterSpec(node: Node): boolean %checks {
  return (
    node._kind === 'AlterAddIndex' ||
    node._kind === 'AlterAddColumn' ||
    node._kind === 'AlterAddPrimaryKey' ||
    node._kind === 'AlterAddUniqueIndex' ||
    node._kind === 'AlterAddFullTextIndex' ||
    node._kind === 'AlterAddForeignKey' ||
    node._kind === 'AlterChangeColumn' ||
    node._kind === 'AlterConvertTo' ||
    node._kind === 'AlterDropColumn' ||
    node._kind === 'AlterDropDefault' ||
    node._kind === 'AlterDropForeignKey' ||
    node._kind === 'AlterDropIndex' ||
    node._kind === 'AlterDropPrimaryKey' ||
    node._kind === 'AlterRenameIndex' ||
    node._kind === 'AlterRenameTable' ||
    node._kind === 'AlterTableOptions'
  );
}

function isBytes(node: Node): boolean %checks {
  return (
    node._kind === 'Blob' ||
    node._kind === 'Binary' ||
    node._kind === 'VarBinary' ||
    node._kind === 'TinyBlob' ||
    node._kind === 'MediumBlob' ||
    node._kind === 'LongBlob'
  );
}

function isCreateTableDefinition(node: Node): boolean %checks {
  return (
    node._kind === 'Column' ||
    node._kind === 'PrimaryKey' ||
    node._kind === 'Index' ||
    node._kind === 'UniqueIndex' ||
    node._kind === 'FullTextIndex' ||
    node._kind === 'ForeignKey'
  );
}

function isDataType(node: Node): boolean %checks {
  return (
    node._kind === 'Enum' ||
    node._kind === 'Json' ||
    isNumeric(node) ||
    isTemporal(node) ||
    isTextual(node) ||
    isBytes(node)
  );
}

function isDefaultValue(node: Node): boolean %checks {
  return node._kind === 'Literal' || node._kind === 'CurrentTimestamp';
}

function isExpression(node: Node): boolean %checks {
  return (
    node._kind === 'Literal' ||
    node._kind === 'Identifier' ||
    node._kind === 'UnaryExpression' ||
    node._kind === 'BinaryExpression' ||
    node._kind === 'CallExpression'
  );
}

function isInteger(node: Node): boolean %checks {
  return (
    node._kind === 'TinyInt' ||
    node._kind === 'MediumInt' ||
    node._kind === 'SmallInt' ||
    node._kind === 'Int' ||
    node._kind === 'BigInt'
  );
}

function isNumeric(node: Node): boolean %checks {
  return isInteger(node) || isReal(node);
}

function isReal(node: Node): boolean %checks {
  return node._kind === 'Decimal' || node._kind === 'Float' || node._kind === 'Double';
}

function isStart(node: Node): boolean %checks {
  return isExpression(node) || isStatement(node);
}

function isStatement(node: Node): boolean %checks {
  return (
    node._kind === 'CreateTableStatement' ||
    node._kind === 'CreateTableLikeStatement' ||
    node._kind === 'CreateIndexStatement' ||
    node._kind === 'CreateTriggerStatement' ||
    node._kind === 'CreateFunctionStatement' ||
    node._kind === 'RenameTableStatement' ||
    node._kind === 'AlterDatabaseStatement' ||
    node._kind === 'AlterTableStatement' ||
    node._kind === 'DropTableStatement' ||
    node._kind === 'DropIndexStatement'
  );
}

function isTemporal(node: Node): boolean %checks {
  return (
    node._kind === 'DateTime' ||
    node._kind === 'Timestamp' ||
    node._kind === 'Date' ||
    node._kind === 'Year' ||
    node._kind === 'Time'
  );
}

function isTextual(node: Node): boolean %checks {
  return (
    node._kind === 'Char' ||
    node._kind === 'VarChar' ||
    node._kind === 'Text' ||
    node._kind === 'MediumText' ||
    node._kind === 'LongText'
  );
}

function isTextualOrEnum(node: Node): boolean %checks {
  return node._kind === 'Enum' || isTextual(node);
}

export type AlterSpec =
  | AlterAddIndex
  | AlterAddColumn
  | AlterAddPrimaryKey
  | AlterAddUniqueIndex
  | AlterAddFullTextIndex
  | AlterAddForeignKey
  | AlterChangeColumn
  | AlterConvertTo
  | AlterDropColumn
  | AlterDropDefault
  | AlterDropForeignKey
  | AlterDropIndex
  | AlterDropPrimaryKey
  | AlterRenameIndex
  | AlterRenameTable
  | AlterTableOptions;

export type Bytes = Blob | Binary | VarBinary | TinyBlob | MediumBlob | LongBlob;

export type CreateTableDefinition = Column | PrimaryKey | Index | UniqueIndex | FullTextIndex | ForeignKey;

export type DataType = Numeric | Temporal | Textual | Enum | Bytes | Json;

export type DefaultValue = Literal | CurrentTimestamp;

export type Expression = Literal | Identifier | UnaryExpression | BinaryExpression | CallExpression;

export type Integer = TinyInt | MediumInt | SmallInt | Int | BigInt;

export type Numeric = Integer | Real;

export type Real = Decimal | Float | Double;

export type Start = Expression | Statement;

export type Statement =
  | CreateTableStatement
  | CreateTableLikeStatement
  | CreateIndexStatement
  | CreateTriggerStatement
  | CreateFunctionStatement
  | RenameTableStatement
  | AlterDatabaseStatement
  | AlterTableStatement
  | DropTableStatement
  | DropIndexStatement;

export type Temporal = DateTime | Timestamp | Date | Year | Time;

export type Textual = Char | VarChar | Text | MediumText | LongText;

export type TextualOrEnum = Textual | Enum;

export type Node =
  | AlterAddColumn
  | AlterAddForeignKey
  | AlterAddFullTextIndex
  | AlterAddIndex
  | AlterAddPrimaryKey
  | AlterAddUniqueIndex
  | AlterChangeColumn
  | AlterConvertTo
  | AlterDatabaseStatement
  | AlterDropColumn
  | AlterDropDefault
  | AlterDropForeignKey
  | AlterDropIndex
  | AlterDropPrimaryKey
  | AlterRenameIndex
  | AlterRenameTable
  | AlterTableOptions
  | AlterTableStatement
  | BigInt
  | Binary
  | BinaryExpression
  | Blob
  | BuiltInFunction
  | CallExpression
  | Char
  | Column
  | ColumnDefinition
  | CreateFunctionStatement
  | CreateIndexStatement
  | CreateTableLikeStatement
  | CreateTableStatement
  | CreateTriggerStatement
  | CurrentTimestamp
  | DatabaseOptions
  | Date
  | DateTime
  | Decimal
  | Double
  | DropIndexStatement
  | DropTableStatement
  | Enum
  | Float
  | ForeignKey
  | FullTextIndex
  | GeneratedDefinition
  | Identifier
  | Index
  | IndexColName
  | Int
  | Json
  | Literal
  | LongBlob
  | LongText
  | MediumBlob
  | MediumInt
  | MediumText
  | PrimaryKey
  | ReferenceDefinition
  | RenameTableStatement
  | SmallInt
  | TableOptions
  | Text
  | Time
  | Timestamp
  | TinyBlob
  | TinyInt
  | UnaryExpression
  | UniqueIndex
  | VarBinary
  | VarChar
  | Year;

function isNode(node: Node): boolean %checks {
  return (
    node._kind === 'AlterAddColumn' ||
    node._kind === 'AlterAddForeignKey' ||
    node._kind === 'AlterAddFullTextIndex' ||
    node._kind === 'AlterAddIndex' ||
    node._kind === 'AlterAddPrimaryKey' ||
    node._kind === 'AlterAddUniqueIndex' ||
    node._kind === 'AlterChangeColumn' ||
    node._kind === 'AlterConvertTo' ||
    node._kind === 'AlterDatabaseStatement' ||
    node._kind === 'AlterDropColumn' ||
    node._kind === 'AlterDropDefault' ||
    node._kind === 'AlterDropForeignKey' ||
    node._kind === 'AlterDropIndex' ||
    node._kind === 'AlterDropPrimaryKey' ||
    node._kind === 'AlterRenameIndex' ||
    node._kind === 'AlterRenameTable' ||
    node._kind === 'AlterTableOptions' ||
    node._kind === 'AlterTableStatement' ||
    node._kind === 'BigInt' ||
    node._kind === 'Binary' ||
    node._kind === 'BinaryExpression' ||
    node._kind === 'Blob' ||
    node._kind === 'BuiltInFunction' ||
    node._kind === 'CallExpression' ||
    node._kind === 'Char' ||
    node._kind === 'Column' ||
    node._kind === 'ColumnDefinition' ||
    node._kind === 'CreateFunctionStatement' ||
    node._kind === 'CreateIndexStatement' ||
    node._kind === 'CreateTableLikeStatement' ||
    node._kind === 'CreateTableStatement' ||
    node._kind === 'CreateTriggerStatement' ||
    node._kind === 'CurrentTimestamp' ||
    node._kind === 'DatabaseOptions' ||
    node._kind === 'Date' ||
    node._kind === 'DateTime' ||
    node._kind === 'Decimal' ||
    node._kind === 'Double' ||
    node._kind === 'DropIndexStatement' ||
    node._kind === 'DropTableStatement' ||
    node._kind === 'Enum' ||
    node._kind === 'Float' ||
    node._kind === 'ForeignKey' ||
    node._kind === 'FullTextIndex' ||
    node._kind === 'GeneratedDefinition' ||
    node._kind === 'Identifier' ||
    node._kind === 'Index' ||
    node._kind === 'IndexColName' ||
    node._kind === 'Int' ||
    node._kind === 'Json' ||
    node._kind === 'Literal' ||
    node._kind === 'LongBlob' ||
    node._kind === 'LongText' ||
    node._kind === 'MediumBlob' ||
    node._kind === 'MediumInt' ||
    node._kind === 'MediumText' ||
    node._kind === 'PrimaryKey' ||
    node._kind === 'ReferenceDefinition' ||
    node._kind === 'RenameTableStatement' ||
    node._kind === 'SmallInt' ||
    node._kind === 'TableOptions' ||
    node._kind === 'Text' ||
    node._kind === 'Time' ||
    node._kind === 'Timestamp' ||
    node._kind === 'TinyBlob' ||
    node._kind === 'TinyInt' ||
    node._kind === 'UnaryExpression' ||
    node._kind === 'UniqueIndex' ||
    node._kind === 'VarBinary' ||
    node._kind === 'VarChar' ||
    node._kind === 'Year'
  );
}

export type AlterAddColumn = {|
  _kind: 'AlterAddColumn',
  colName: string,
  definition: ColumnDefinition,
  position: string | null,
|};

export type AlterAddForeignKey = {|
  _kind: 'AlterAddForeignKey',
  constraintName: string | null,
  indexName: string | null,
  indexColNames: Array<IndexColName>,
  reference: ReferenceDefinition,
|};

export type AlterAddFullTextIndex = {|
  _kind: 'AlterAddFullTextIndex',
  indexName: string | null,
  indexColNames: Array<IndexColName>,
|};

export type AlterAddIndex = {|
  _kind: 'AlterAddIndex',
  indexName: string | null,
  indexType: IndexType | null,
  indexColNames: Array<IndexColName>,
|};

export type AlterAddPrimaryKey = {|
  _kind: 'AlterAddPrimaryKey',
  constraintName: string | null,
  indexType: IndexType | null,
  indexColNames: Array<IndexColName>,
|};

export type AlterAddUniqueIndex = {|
  _kind: 'AlterAddUniqueIndex',
  constraintName: string | null,
  indexName: string | null,
  indexType: IndexType | null,
  indexColNames: Array<IndexColName>,
|};

export type AlterChangeColumn = {|
  _kind: 'AlterChangeColumn',
  oldColName: string,
  newColName: string,
  definition: ColumnDefinition,
  position: string | null,
|};

export type AlterConvertTo = {|
  _kind: 'AlterConvertTo',
  charset: string,
  collate: string | null,
|};

export type AlterDatabaseStatement = {|
  _kind: 'AlterDatabaseStatement',
  dbName: string,
  options: DatabaseOptions,
|};

export type AlterDropColumn = {|
  _kind: 'AlterDropColumn',
  colName: string,
|};

export type AlterDropDefault = {|
  _kind: 'AlterDropDefault',
  colName: string,
|};

export type AlterDropForeignKey = {|
  _kind: 'AlterDropForeignKey',
  symbol: string,
|};

export type AlterDropIndex = {|
  _kind: 'AlterDropIndex',
  indexName: string,
|};

export type AlterDropPrimaryKey = {|
  _kind: 'AlterDropPrimaryKey',
|};

export type AlterRenameIndex = {|
  _kind: 'AlterRenameIndex',
  oldIndexName: string,
  newIndexName: string,
|};

export type AlterRenameTable = {|
  _kind: 'AlterRenameTable',
  newTblName: string,
|};

export type AlterTableOptions = {|
  _kind: 'AlterTableOptions',
  options: TableOptions,
|};

export type AlterTableStatement = {|
  _kind: 'AlterTableStatement',
  tblName: string,
  changes: Array<AlterSpec>,
|};

export type BigInt = {|
  _kind: 'BigInt',
  baseType: 'bigint',
  length: number,
  unsigned: boolean,
|};

export type Binary = {|
  _kind: 'Binary',
  baseType: 'binary',
  length: number,
|};

export type BinaryExpression = {|
  _kind: 'BinaryExpression',
  op: BinaryOp,
  expr1: Expression,
  expr2: Expression,
|};

export type Blob = {|
  _kind: 'Blob',
  baseType: 'blob',
  length: number,
|};

export type BuiltInFunction = {|
  _kind: 'BuiltInFunction',
  name: string,
|};

export type CallExpression = {|
  _kind: 'CallExpression',
  callee: BuiltInFunction,
  args: Array<Expression> | null,
|};

export type Char = {|
  _kind: 'Char',
  baseType: 'char',
  length: number,
  encoding: Encoding | null,
|};

export type Column = {|
  _kind: 'Column',
  colName: string,
  definition: ColumnDefinition,
|};

export type ColumnDefinition = {|
  _kind: 'ColumnDefinition',
  dataType: DataType,
  nullable: boolean | null,
  defaultValue: DefaultValue | null,
  onUpdate: CurrentTimestamp | null,
  isUnique: boolean,
  isPrimary: boolean,
  autoIncrement: boolean,
  comment: string | null,
  reference: ReferenceDefinition | null,
  generated: GeneratedDefinition | null,
|};

export type CreateFunctionStatement = {|
  _kind: 'CreateFunctionStatement',
|};

export type CreateIndexStatement = {|
  _kind: 'CreateIndexStatement',
  indexName: string,
  indexKind: IndexKind,
  tblName: string,
  indexColNames: Array<IndexColName>,
|};

export type CreateTableLikeStatement = {|
  _kind: 'CreateTableLikeStatement',
  tblName: string,
  oldTblName: string,
  ifNotExists: boolean | null,
|};

export type CreateTableStatement = {|
  _kind: 'CreateTableStatement',
  tblName: string,
  definitions: Array<CreateTableDefinition>,
  options: TableOptions | null,
  ifNotExists: boolean,
|};

export type CreateTriggerStatement = {|
  _kind: 'CreateTriggerStatement',
  triggerName: string,
  tblName: string,
|};

export type CurrentTimestamp = {|
  _kind: 'CurrentTimestamp',
  precision: number | null,
|};

export type DatabaseOptions = {|
  _kind: 'DatabaseOptions',
  CHARSET: string | null,
  COLLATE: string | null,
|};

export type Date = {|
  _kind: 'Date',
  baseType: 'date',
|};

export type DateTime = {|
  _kind: 'DateTime',
  baseType: 'datetime',
  fsp: number | null,
|};

export type Decimal = {|
  _kind: 'Decimal',
  baseType: 'decimal',
  precision: Precision | null,
  unsigned: boolean,
|};

export type Double = {|
  _kind: 'Double',
  baseType: 'double',
  precision: Precision | null,
  unsigned: boolean,
|};

export type DropIndexStatement = {|
  _kind: 'DropIndexStatement',
  indexName: string,
  tblName: string,
|};

export type DropTableStatement = {|
  _kind: 'DropTableStatement',
  tblName: string,
  ifExists: boolean,
|};

export type Enum = {|
  _kind: 'Enum',
  baseType: 'enum',
  values: Array<string>,
  encoding: Encoding | null,
|};

export type Float = {|
  _kind: 'Float',
  baseType: 'float',
  precision: Precision | null,
  unsigned: boolean,
|};

export type ForeignKey = {|
  _kind: 'ForeignKey',
  constraintName: string | null,
  indexName: string | null,
  indexColNames: Array<IndexColName>,
  reference: ReferenceDefinition,
|};

export type FullTextIndex = {|
  _kind: 'FullTextIndex',
  indexName: string | null,
  indexColNames: Array<IndexColName>,
|};

export type GeneratedDefinition = {|
  _kind: 'GeneratedDefinition',
  type: 'generated',
  expr: Expression,
  mode: GeneratedColumnMode,
|};

export type Identifier = {|
  _kind: 'Identifier',
  name: string,
|};

export type Index = {|
  _kind: 'Index',
  indexName: string | null,
  indexColNames: Array<IndexColName>,
|};

export type IndexColName = {|
  _kind: 'IndexColName',
  colName: string,
  len: number | null,
  direction: Direction | null,
|};

export type Int = {|
  _kind: 'Int',
  baseType: 'int',
  length: number,
  unsigned: boolean,
|};

export type Json = {|
  _kind: 'Json',
  baseType: 'json',
|};

export type Literal = {|
  _kind: 'Literal',
  value: mixed,
|};

export type LongBlob = {|
  _kind: 'LongBlob',
  baseType: 'longblob',
|};

export type LongText = {|
  _kind: 'LongText',
  baseType: 'longtext',
  encoding: Encoding | null,
|};

export type MediumBlob = {|
  _kind: 'MediumBlob',
  baseType: 'mediumblob',
|};

export type MediumInt = {|
  _kind: 'MediumInt',
  baseType: 'mediumint',
  length: number,
  unsigned: boolean,
|};

export type MediumText = {|
  _kind: 'MediumText',
  baseType: 'mediumtext',
  encoding: Encoding | null,
|};

export type PrimaryKey = {|
  _kind: 'PrimaryKey',
  indexColNames: Array<IndexColName>,
|};

export type ReferenceDefinition = {|
  _kind: 'ReferenceDefinition',
  tblName: string,
  indexColNames: Array<IndexColName>,
  matchMode: MatchMode | null,
  onDelete: ReferenceOption,
  onUpdate: ReferenceOption | null,
|};

export type RenameTableStatement = {|
  _kind: 'RenameTableStatement',
  tblName: string,
  newName: string,
|};

export type SmallInt = {|
  _kind: 'SmallInt',
  baseType: 'smallint',
  length: number,
  unsigned: boolean,
|};

export type TableOptions = {|
  _kind: 'TableOptions',
  AUTO_INCREMENT: number | null,
  ENGINE: string | null,
  CHARSET: string | null,
  COLLATE: string | null,
|};

export type Text = {|
  _kind: 'Text',
  baseType: 'text',
  encoding: Encoding | null,
|};

export type Time = {|
  _kind: 'Time',
  baseType: 'time',
|};

export type Timestamp = {|
  _kind: 'Timestamp',
  baseType: 'timestamp',
  fsp: number | null,
|};

export type TinyBlob = {|
  _kind: 'TinyBlob',
  baseType: 'tinyblob',
|};

export type TinyInt = {|
  _kind: 'TinyInt',
  baseType: 'tinyint',
  length: number,
  unsigned: boolean,
|};

export type UnaryExpression = {|
  _kind: 'UnaryExpression',
  op: UnaryOp,
  expr: Expression,
|};

export type UniqueIndex = {|
  _kind: 'UniqueIndex',
  constraintName: string | null,
  indexName: string | null,
  indexColNames: Array<IndexColName>,
|};

export type VarBinary = {|
  _kind: 'VarBinary',
  baseType: 'varbinary',
  length: number,
|};

export type VarChar = {|
  _kind: 'VarChar',
  baseType: 'varchar',
  length: number,
  encoding: Encoding | null,
|};

export type Year = {|
  _kind: 'Year',
  baseType: 'year',
|};

export default {
  AlterAddColumn(colName: string, definition: ColumnDefinition, position: string | null = null): AlterAddColumn {
    invariant(
      typeof colName === 'string',
      `Invalid value for "colName" arg in "AlterAddColumn" call.\nExpected: string\nGot:      ${JSON.stringify(
        colName,
      )}`,
    );

    invariant(
      definition._kind === 'ColumnDefinition',
      `Invalid value for "definition" arg in "AlterAddColumn" call.\nExpected: ColumnDefinition\nGot:      ${JSON.stringify(
        definition,
      )}`,
    );

    invariant(
      position === null || typeof position === 'string',
      `Invalid value for "position" arg in "AlterAddColumn" call.\nExpected: string?\nGot:      ${JSON.stringify(
        position,
      )}`,
    );

    return {
      _kind: 'AlterAddColumn',
      colName,
      definition,
      position,
    };
  },

  AlterAddForeignKey(
    constraintName: string | null,
    indexName: string | null,
    indexColNames: Array<IndexColName>,
    reference: ReferenceDefinition,
  ): AlterAddForeignKey {
    invariant(
      constraintName === null || typeof constraintName === 'string',
      `Invalid value for "constraintName" arg in "AlterAddForeignKey" call.\nExpected: string?\nGot:      ${JSON.stringify(
        constraintName,
      )}`,
    );

    invariant(
      indexName === null || typeof indexName === 'string',
      `Invalid value for "indexName" arg in "AlterAddForeignKey" call.\nExpected: string?\nGot:      ${JSON.stringify(
        indexName,
      )}`,
    );

    invariant(
      Array.isArray(indexColNames) &&
        indexColNames.length > 0 &&
        indexColNames.every((item) => item._kind === 'IndexColName'),
      `Invalid value for "indexColNames" arg in "AlterAddForeignKey" call.\nExpected: IndexColName+\nGot:      ${JSON.stringify(
        indexColNames,
      )}`,
    );

    invariant(
      reference._kind === 'ReferenceDefinition',
      `Invalid value for "reference" arg in "AlterAddForeignKey" call.\nExpected: ReferenceDefinition\nGot:      ${JSON.stringify(
        reference,
      )}`,
    );

    return {
      _kind: 'AlterAddForeignKey',
      constraintName,
      indexName,
      indexColNames,
      reference,
    };
  },

  AlterAddFullTextIndex(indexName: string | null, indexColNames: Array<IndexColName>): AlterAddFullTextIndex {
    invariant(
      indexName === null || typeof indexName === 'string',
      `Invalid value for "indexName" arg in "AlterAddFullTextIndex" call.\nExpected: string?\nGot:      ${JSON.stringify(
        indexName,
      )}`,
    );

    invariant(
      Array.isArray(indexColNames) &&
        indexColNames.length > 0 &&
        indexColNames.every((item) => item._kind === 'IndexColName'),
      `Invalid value for "indexColNames" arg in "AlterAddFullTextIndex" call.\nExpected: IndexColName+\nGot:      ${JSON.stringify(
        indexColNames,
      )}`,
    );

    return {
      _kind: 'AlterAddFullTextIndex',
      indexName,
      indexColNames,
    };
  },

  AlterAddIndex(
    indexName: string | null,
    indexType: IndexType | null,
    indexColNames: Array<IndexColName>,
  ): AlterAddIndex {
    invariant(
      indexName === null || typeof indexName === 'string',
      `Invalid value for "indexName" arg in "AlterAddIndex" call.\nExpected: string?\nGot:      ${JSON.stringify(
        indexName,
      )}`,
    );

    invariant(
      Array.isArray(indexColNames) &&
        indexColNames.length > 0 &&
        indexColNames.every((item) => item._kind === 'IndexColName'),
      `Invalid value for "indexColNames" arg in "AlterAddIndex" call.\nExpected: IndexColName+\nGot:      ${JSON.stringify(
        indexColNames,
      )}`,
    );

    return {
      _kind: 'AlterAddIndex',
      indexName,
      indexType,
      indexColNames,
    };
  },

  AlterAddPrimaryKey(
    constraintName: string | null,
    indexType: IndexType | null,
    indexColNames: Array<IndexColName>,
  ): AlterAddPrimaryKey {
    invariant(
      constraintName === null || typeof constraintName === 'string',
      `Invalid value for "constraintName" arg in "AlterAddPrimaryKey" call.\nExpected: string?\nGot:      ${JSON.stringify(
        constraintName,
      )}`,
    );

    invariant(
      Array.isArray(indexColNames) &&
        indexColNames.length > 0 &&
        indexColNames.every((item) => item._kind === 'IndexColName'),
      `Invalid value for "indexColNames" arg in "AlterAddPrimaryKey" call.\nExpected: IndexColName+\nGot:      ${JSON.stringify(
        indexColNames,
      )}`,
    );

    return {
      _kind: 'AlterAddPrimaryKey',
      constraintName,
      indexType,
      indexColNames,
    };
  },

  AlterAddUniqueIndex(
    constraintName: string | null,
    indexName: string | null,
    indexType: IndexType | null,
    indexColNames: Array<IndexColName>,
  ): AlterAddUniqueIndex {
    invariant(
      constraintName === null || typeof constraintName === 'string',
      `Invalid value for "constraintName" arg in "AlterAddUniqueIndex" call.\nExpected: string?\nGot:      ${JSON.stringify(
        constraintName,
      )}`,
    );

    invariant(
      indexName === null || typeof indexName === 'string',
      `Invalid value for "indexName" arg in "AlterAddUniqueIndex" call.\nExpected: string?\nGot:      ${JSON.stringify(
        indexName,
      )}`,
    );

    invariant(
      Array.isArray(indexColNames) &&
        indexColNames.length > 0 &&
        indexColNames.every((item) => item._kind === 'IndexColName'),
      `Invalid value for "indexColNames" arg in "AlterAddUniqueIndex" call.\nExpected: IndexColName+\nGot:      ${JSON.stringify(
        indexColNames,
      )}`,
    );

    return {
      _kind: 'AlterAddUniqueIndex',
      constraintName,
      indexName,
      indexType,
      indexColNames,
    };
  },

  AlterChangeColumn(
    oldColName: string,
    newColName: string,
    definition: ColumnDefinition,
    position: string | null = null,
  ): AlterChangeColumn {
    invariant(
      typeof oldColName === 'string',
      `Invalid value for "oldColName" arg in "AlterChangeColumn" call.\nExpected: string\nGot:      ${JSON.stringify(
        oldColName,
      )}`,
    );

    invariant(
      typeof newColName === 'string',
      `Invalid value for "newColName" arg in "AlterChangeColumn" call.\nExpected: string\nGot:      ${JSON.stringify(
        newColName,
      )}`,
    );

    invariant(
      definition._kind === 'ColumnDefinition',
      `Invalid value for "definition" arg in "AlterChangeColumn" call.\nExpected: ColumnDefinition\nGot:      ${JSON.stringify(
        definition,
      )}`,
    );

    invariant(
      position === null || typeof position === 'string',
      `Invalid value for "position" arg in "AlterChangeColumn" call.\nExpected: string?\nGot:      ${JSON.stringify(
        position,
      )}`,
    );

    return {
      _kind: 'AlterChangeColumn',
      oldColName,
      newColName,
      definition,
      position,
    };
  },

  AlterConvertTo(charset: string, collate: string | null = null): AlterConvertTo {
    invariant(
      typeof charset === 'string',
      `Invalid value for "charset" arg in "AlterConvertTo" call.\nExpected: string\nGot:      ${JSON.stringify(
        charset,
      )}`,
    );

    invariant(
      collate === null || typeof collate === 'string',
      `Invalid value for "collate" arg in "AlterConvertTo" call.\nExpected: string?\nGot:      ${JSON.stringify(
        collate,
      )}`,
    );

    return {
      _kind: 'AlterConvertTo',
      charset,
      collate,
    };
  },

  AlterDatabaseStatement(dbName: string, options: DatabaseOptions): AlterDatabaseStatement {
    invariant(
      typeof dbName === 'string',
      `Invalid value for "dbName" arg in "AlterDatabaseStatement" call.\nExpected: string\nGot:      ${JSON.stringify(
        dbName,
      )}`,
    );

    invariant(
      options._kind === 'DatabaseOptions',
      `Invalid value for "options" arg in "AlterDatabaseStatement" call.\nExpected: DatabaseOptions\nGot:      ${JSON.stringify(
        options,
      )}`,
    );

    return {
      _kind: 'AlterDatabaseStatement',
      dbName,
      options,
    };
  },

  AlterDropColumn(colName: string): AlterDropColumn {
    invariant(
      typeof colName === 'string',
      `Invalid value for "colName" arg in "AlterDropColumn" call.\nExpected: string\nGot:      ${JSON.stringify(
        colName,
      )}`,
    );

    return {
      _kind: 'AlterDropColumn',
      colName,
    };
  },

  AlterDropDefault(colName: string): AlterDropDefault {
    invariant(
      typeof colName === 'string',
      `Invalid value for "colName" arg in "AlterDropDefault" call.\nExpected: string\nGot:      ${JSON.stringify(
        colName,
      )}`,
    );

    return {
      _kind: 'AlterDropDefault',
      colName,
    };
  },

  AlterDropForeignKey(symbol: string): AlterDropForeignKey {
    invariant(
      typeof symbol === 'string',
      `Invalid value for "symbol" arg in "AlterDropForeignKey" call.\nExpected: string\nGot:      ${JSON.stringify(
        symbol,
      )}`,
    );

    return {
      _kind: 'AlterDropForeignKey',
      symbol,
    };
  },

  AlterDropIndex(indexName: string): AlterDropIndex {
    invariant(
      typeof indexName === 'string',
      `Invalid value for "indexName" arg in "AlterDropIndex" call.\nExpected: string\nGot:      ${JSON.stringify(
        indexName,
      )}`,
    );

    return {
      _kind: 'AlterDropIndex',
      indexName,
    };
  },

  AlterDropPrimaryKey(): AlterDropPrimaryKey {
    return {
      _kind: 'AlterDropPrimaryKey',
    };
  },

  AlterRenameIndex(oldIndexName: string, newIndexName: string): AlterRenameIndex {
    invariant(
      typeof oldIndexName === 'string',
      `Invalid value for "oldIndexName" arg in "AlterRenameIndex" call.\nExpected: string\nGot:      ${JSON.stringify(
        oldIndexName,
      )}`,
    );

    invariant(
      typeof newIndexName === 'string',
      `Invalid value for "newIndexName" arg in "AlterRenameIndex" call.\nExpected: string\nGot:      ${JSON.stringify(
        newIndexName,
      )}`,
    );

    return {
      _kind: 'AlterRenameIndex',
      oldIndexName,
      newIndexName,
    };
  },

  AlterRenameTable(newTblName: string): AlterRenameTable {
    invariant(
      typeof newTblName === 'string',
      `Invalid value for "newTblName" arg in "AlterRenameTable" call.\nExpected: string\nGot:      ${JSON.stringify(
        newTblName,
      )}`,
    );

    return {
      _kind: 'AlterRenameTable',
      newTblName,
    };
  },

  AlterTableOptions(options: TableOptions): AlterTableOptions {
    invariant(
      options._kind === 'TableOptions',
      `Invalid value for "options" arg in "AlterTableOptions" call.\nExpected: TableOptions\nGot:      ${JSON.stringify(
        options,
      )}`,
    );

    return {
      _kind: 'AlterTableOptions',
      options,
    };
  },

  AlterTableStatement(tblName: string, changes: Array<AlterSpec>): AlterTableStatement {
    invariant(
      typeof tblName === 'string',
      `Invalid value for "tblName" arg in "AlterTableStatement" call.\nExpected: string\nGot:      ${JSON.stringify(
        tblName,
      )}`,
    );

    invariant(
      Array.isArray(changes) && changes.length > 0 && changes.every((item) => isAlterSpec(item)),
      `Invalid value for "changes" arg in "AlterTableStatement" call.\nExpected: @AlterSpec+\nGot:      ${JSON.stringify(
        changes,
      )}`,
    );

    return {
      _kind: 'AlterTableStatement',
      tblName,
      changes,
    };
  },

  BigInt(length: number, unsigned: boolean): BigInt {
    invariant(
      typeof length === 'number',
      `Invalid value for "length" arg in "BigInt" call.\nExpected: number\nGot:      ${JSON.stringify(length)}`,
    );

    invariant(
      typeof unsigned === 'boolean',
      `Invalid value for "unsigned" arg in "BigInt" call.\nExpected: boolean\nGot:      ${JSON.stringify(unsigned)}`,
    );

    return {
      _kind: 'BigInt',
      baseType: 'bigint',
      length,
      unsigned,
    };
  },

  Binary(length: number): Binary {
    invariant(
      typeof length === 'number',
      `Invalid value for "length" arg in "Binary" call.\nExpected: number\nGot:      ${JSON.stringify(length)}`,
    );

    return {
      _kind: 'Binary',
      baseType: 'binary',
      length,
    };
  },

  BinaryExpression(op: BinaryOp, expr1: Expression, expr2: Expression): BinaryExpression {
    invariant(
      isExpression(expr1),
      `Invalid value for "expr1" arg in "BinaryExpression" call.\nExpected: @Expression\nGot:      ${JSON.stringify(
        expr1,
      )}`,
    );

    invariant(
      isExpression(expr2),
      `Invalid value for "expr2" arg in "BinaryExpression" call.\nExpected: @Expression\nGot:      ${JSON.stringify(
        expr2,
      )}`,
    );

    return {
      _kind: 'BinaryExpression',
      op,
      expr1,
      expr2,
    };
  },

  Blob(length: number): Blob {
    invariant(
      typeof length === 'number',
      `Invalid value for "length" arg in "Blob" call.\nExpected: number\nGot:      ${JSON.stringify(length)}`,
    );

    return {
      _kind: 'Blob',
      baseType: 'blob',
      length,
    };
  },

  BuiltInFunction(name: string): BuiltInFunction {
    invariant(
      typeof name === 'string',
      `Invalid value for "name" arg in "BuiltInFunction" call.\nExpected: string\nGot:      ${JSON.stringify(name)}`,
    );

    return {
      _kind: 'BuiltInFunction',
      name,
    };
  },

  CallExpression(callee: BuiltInFunction, args: Array<Expression> | null = null): CallExpression {
    invariant(
      callee._kind === 'BuiltInFunction',
      `Invalid value for "callee" arg in "CallExpression" call.\nExpected: BuiltInFunction\nGot:      ${JSON.stringify(
        callee,
      )}`,
    );

    invariant(
      args === null || (Array.isArray(args) && args.every((item) => isExpression(item))),
      `Invalid value for "args" arg in "CallExpression" call.\nExpected: @Expression*?\nGot:      ${JSON.stringify(
        args,
      )}`,
    );

    return {
      _kind: 'CallExpression',
      callee,
      args,
    };
  },

  Char(length: number, encoding: Encoding | null = null): Char {
    invariant(
      typeof length === 'number',
      `Invalid value for "length" arg in "Char" call.\nExpected: number\nGot:      ${JSON.stringify(length)}`,
    );

    return {
      _kind: 'Char',
      baseType: 'char',
      length,
      encoding,
    };
  },

  Column(colName: string, definition: ColumnDefinition): Column {
    invariant(
      typeof colName === 'string',
      `Invalid value for "colName" arg in "Column" call.\nExpected: string\nGot:      ${JSON.stringify(colName)}`,
    );

    invariant(
      definition._kind === 'ColumnDefinition',
      `Invalid value for "definition" arg in "Column" call.\nExpected: ColumnDefinition\nGot:      ${JSON.stringify(
        definition,
      )}`,
    );

    return {
      _kind: 'Column',
      colName,
      definition,
    };
  },

  ColumnDefinition(
    dataType: DataType,
    nullable: boolean | null,
    defaultValue: DefaultValue | null,
    onUpdate: CurrentTimestamp | null,
    isUnique: boolean,
    isPrimary: boolean,
    autoIncrement: boolean,
    comment: string | null = null,
    reference: ReferenceDefinition | null = null,
    generated: GeneratedDefinition | null = null,
  ): ColumnDefinition {
    invariant(
      isDataType(dataType),
      `Invalid value for "dataType" arg in "ColumnDefinition" call.\nExpected: @DataType\nGot:      ${JSON.stringify(
        dataType,
      )}`,
    );

    invariant(
      nullable === null || typeof nullable === 'boolean',
      `Invalid value for "nullable" arg in "ColumnDefinition" call.\nExpected: boolean?\nGot:      ${JSON.stringify(
        nullable,
      )}`,
    );

    invariant(
      defaultValue === null || isDefaultValue(defaultValue),
      `Invalid value for "defaultValue" arg in "ColumnDefinition" call.\nExpected: @DefaultValue?\nGot:      ${JSON.stringify(
        defaultValue,
      )}`,
    );

    invariant(
      onUpdate === null || onUpdate._kind === 'CurrentTimestamp',
      `Invalid value for "onUpdate" arg in "ColumnDefinition" call.\nExpected: CurrentTimestamp?\nGot:      ${JSON.stringify(
        onUpdate,
      )}`,
    );

    invariant(
      typeof isUnique === 'boolean',
      `Invalid value for "isUnique" arg in "ColumnDefinition" call.\nExpected: boolean\nGot:      ${JSON.stringify(
        isUnique,
      )}`,
    );

    invariant(
      typeof isPrimary === 'boolean',
      `Invalid value for "isPrimary" arg in "ColumnDefinition" call.\nExpected: boolean\nGot:      ${JSON.stringify(
        isPrimary,
      )}`,
    );

    invariant(
      typeof autoIncrement === 'boolean',
      `Invalid value for "autoIncrement" arg in "ColumnDefinition" call.\nExpected: boolean\nGot:      ${JSON.stringify(
        autoIncrement,
      )}`,
    );

    invariant(
      comment === null || typeof comment === 'string',
      `Invalid value for "comment" arg in "ColumnDefinition" call.\nExpected: string?\nGot:      ${JSON.stringify(
        comment,
      )}`,
    );

    invariant(
      reference === null || reference._kind === 'ReferenceDefinition',
      `Invalid value for "reference" arg in "ColumnDefinition" call.\nExpected: ReferenceDefinition?\nGot:      ${JSON.stringify(
        reference,
      )}`,
    );

    invariant(
      generated === null || generated._kind === 'GeneratedDefinition',
      `Invalid value for "generated" arg in "ColumnDefinition" call.\nExpected: GeneratedDefinition?\nGot:      ${JSON.stringify(
        generated,
      )}`,
    );

    return {
      _kind: 'ColumnDefinition',
      dataType,
      nullable,
      defaultValue,
      onUpdate,
      isUnique,
      isPrimary,
      autoIncrement,
      comment,
      reference,
      generated,
    };
  },

  CreateFunctionStatement(): CreateFunctionStatement {
    return {
      _kind: 'CreateFunctionStatement',
    };
  },

  CreateIndexStatement(
    indexName: string,
    indexKind: IndexKind,
    tblName: string,
    indexColNames: Array<IndexColName>,
  ): CreateIndexStatement {
    invariant(
      typeof indexName === 'string',
      `Invalid value for "indexName" arg in "CreateIndexStatement" call.\nExpected: string\nGot:      ${JSON.stringify(
        indexName,
      )}`,
    );

    invariant(
      typeof tblName === 'string',
      `Invalid value for "tblName" arg in "CreateIndexStatement" call.\nExpected: string\nGot:      ${JSON.stringify(
        tblName,
      )}`,
    );

    invariant(
      Array.isArray(indexColNames) &&
        indexColNames.length > 0 &&
        indexColNames.every((item) => item._kind === 'IndexColName'),
      `Invalid value for "indexColNames" arg in "CreateIndexStatement" call.\nExpected: IndexColName+\nGot:      ${JSON.stringify(
        indexColNames,
      )}`,
    );

    return {
      _kind: 'CreateIndexStatement',
      indexName,
      indexKind,
      tblName,
      indexColNames,
    };
  },

  CreateTableLikeStatement(
    tblName: string,
    oldTblName: string,
    ifNotExists: boolean | null = null,
  ): CreateTableLikeStatement {
    invariant(
      typeof tblName === 'string',
      `Invalid value for "tblName" arg in "CreateTableLikeStatement" call.\nExpected: string\nGot:      ${JSON.stringify(
        tblName,
      )}`,
    );

    invariant(
      typeof oldTblName === 'string',
      `Invalid value for "oldTblName" arg in "CreateTableLikeStatement" call.\nExpected: string\nGot:      ${JSON.stringify(
        oldTblName,
      )}`,
    );

    invariant(
      ifNotExists === null || typeof ifNotExists === 'boolean',
      `Invalid value for "ifNotExists" arg in "CreateTableLikeStatement" call.\nExpected: boolean?\nGot:      ${JSON.stringify(
        ifNotExists,
      )}`,
    );

    return {
      _kind: 'CreateTableLikeStatement',
      tblName,
      oldTblName,
      ifNotExists,
    };
  },

  CreateTableStatement(
    tblName: string,
    definitions: Array<CreateTableDefinition>,
    options: TableOptions | null,
    ifNotExists: boolean,
  ): CreateTableStatement {
    invariant(
      typeof tblName === 'string',
      `Invalid value for "tblName" arg in "CreateTableStatement" call.\nExpected: string\nGot:      ${JSON.stringify(
        tblName,
      )}`,
    );

    invariant(
      Array.isArray(definitions) &&
        definitions.length > 0 &&
        definitions.every((item) => isCreateTableDefinition(item)),
      `Invalid value for "definitions" arg in "CreateTableStatement" call.\nExpected: @CreateTableDefinition+\nGot:      ${JSON.stringify(
        definitions,
      )}`,
    );

    invariant(
      options === null || options._kind === 'TableOptions',
      `Invalid value for "options" arg in "CreateTableStatement" call.\nExpected: TableOptions?\nGot:      ${JSON.stringify(
        options,
      )}`,
    );

    invariant(
      typeof ifNotExists === 'boolean',
      `Invalid value for "ifNotExists" arg in "CreateTableStatement" call.\nExpected: boolean\nGot:      ${JSON.stringify(
        ifNotExists,
      )}`,
    );

    return {
      _kind: 'CreateTableStatement',
      tblName,
      definitions,
      options,
      ifNotExists,
    };
  },

  CreateTriggerStatement(triggerName: string, tblName: string): CreateTriggerStatement {
    invariant(
      typeof triggerName === 'string',
      `Invalid value for "triggerName" arg in "CreateTriggerStatement" call.\nExpected: string\nGot:      ${JSON.stringify(
        triggerName,
      )}`,
    );

    invariant(
      typeof tblName === 'string',
      `Invalid value for "tblName" arg in "CreateTriggerStatement" call.\nExpected: string\nGot:      ${JSON.stringify(
        tblName,
      )}`,
    );

    return {
      _kind: 'CreateTriggerStatement',
      triggerName,
      tblName,
    };
  },

  CurrentTimestamp(precision: number | null = null): CurrentTimestamp {
    invariant(
      precision === null || typeof precision === 'number',
      `Invalid value for "precision" arg in "CurrentTimestamp" call.\nExpected: number?\nGot:      ${JSON.stringify(
        precision,
      )}`,
    );

    return {
      _kind: 'CurrentTimestamp',
      precision,
    };
  },

  DatabaseOptions(CHARSET: string | null = null, COLLATE: string | null = null): DatabaseOptions {
    invariant(
      CHARSET === null || typeof CHARSET === 'string',
      `Invalid value for "CHARSET" arg in "DatabaseOptions" call.\nExpected: string?\nGot:      ${JSON.stringify(
        CHARSET,
      )}`,
    );

    invariant(
      COLLATE === null || typeof COLLATE === 'string',
      `Invalid value for "COLLATE" arg in "DatabaseOptions" call.\nExpected: string?\nGot:      ${JSON.stringify(
        COLLATE,
      )}`,
    );

    return {
      _kind: 'DatabaseOptions',
      CHARSET,
      COLLATE,
    };
  },

  Date(): Date {
    return {
      _kind: 'Date',
      baseType: 'date',
    };
  },

  DateTime(fsp: number | null = null): DateTime {
    invariant(
      fsp === null || typeof fsp === 'number',
      `Invalid value for "fsp" arg in "DateTime" call.\nExpected: number?\nGot:      ${JSON.stringify(fsp)}`,
    );

    return {
      _kind: 'DateTime',
      baseType: 'datetime',
      fsp,
    };
  },

  Decimal(precision: Precision | null, unsigned: boolean): Decimal {
    invariant(
      typeof unsigned === 'boolean',
      `Invalid value for "unsigned" arg in "Decimal" call.\nExpected: boolean\nGot:      ${JSON.stringify(unsigned)}`,
    );

    return {
      _kind: 'Decimal',
      baseType: 'decimal',
      precision,
      unsigned,
    };
  },

  Double(precision: Precision | null, unsigned: boolean): Double {
    invariant(
      typeof unsigned === 'boolean',
      `Invalid value for "unsigned" arg in "Double" call.\nExpected: boolean\nGot:      ${JSON.stringify(unsigned)}`,
    );

    return {
      _kind: 'Double',
      baseType: 'double',
      precision,
      unsigned,
    };
  },

  DropIndexStatement(indexName: string, tblName: string): DropIndexStatement {
    invariant(
      typeof indexName === 'string',
      `Invalid value for "indexName" arg in "DropIndexStatement" call.\nExpected: string\nGot:      ${JSON.stringify(
        indexName,
      )}`,
    );

    invariant(
      typeof tblName === 'string',
      `Invalid value for "tblName" arg in "DropIndexStatement" call.\nExpected: string\nGot:      ${JSON.stringify(
        tblName,
      )}`,
    );

    return {
      _kind: 'DropIndexStatement',
      indexName,
      tblName,
    };
  },

  DropTableStatement(tblName: string, ifExists: boolean): DropTableStatement {
    invariant(
      typeof tblName === 'string',
      `Invalid value for "tblName" arg in "DropTableStatement" call.\nExpected: string\nGot:      ${JSON.stringify(
        tblName,
      )}`,
    );

    invariant(
      typeof ifExists === 'boolean',
      `Invalid value for "ifExists" arg in "DropTableStatement" call.\nExpected: boolean\nGot:      ${JSON.stringify(
        ifExists,
      )}`,
    );

    return {
      _kind: 'DropTableStatement',
      tblName,
      ifExists,
    };
  },

  Enum(values: Array<string>, encoding: Encoding | null = null): Enum {
    invariant(
      Array.isArray(values) && values.length > 0 && values.every((item) => typeof item === 'string'),
      `Invalid value for "values" arg in "Enum" call.\nExpected: string+\nGot:      ${JSON.stringify(values)}`,
    );

    return {
      _kind: 'Enum',
      baseType: 'enum',
      values,
      encoding,
    };
  },

  Float(precision: Precision | null, unsigned: boolean): Float {
    invariant(
      typeof unsigned === 'boolean',
      `Invalid value for "unsigned" arg in "Float" call.\nExpected: boolean\nGot:      ${JSON.stringify(unsigned)}`,
    );

    return {
      _kind: 'Float',
      baseType: 'float',
      precision,
      unsigned,
    };
  },

  ForeignKey(
    constraintName: string | null,
    indexName: string | null,
    indexColNames: Array<IndexColName>,
    reference: ReferenceDefinition,
  ): ForeignKey {
    invariant(
      constraintName === null || typeof constraintName === 'string',
      `Invalid value for "constraintName" arg in "ForeignKey" call.\nExpected: string?\nGot:      ${JSON.stringify(
        constraintName,
      )}`,
    );

    invariant(
      indexName === null || typeof indexName === 'string',
      `Invalid value for "indexName" arg in "ForeignKey" call.\nExpected: string?\nGot:      ${JSON.stringify(
        indexName,
      )}`,
    );

    invariant(
      Array.isArray(indexColNames) &&
        indexColNames.length > 0 &&
        indexColNames.every((item) => item._kind === 'IndexColName'),
      `Invalid value for "indexColNames" arg in "ForeignKey" call.\nExpected: IndexColName+\nGot:      ${JSON.stringify(
        indexColNames,
      )}`,
    );

    invariant(
      reference._kind === 'ReferenceDefinition',
      `Invalid value for "reference" arg in "ForeignKey" call.\nExpected: ReferenceDefinition\nGot:      ${JSON.stringify(
        reference,
      )}`,
    );

    return {
      _kind: 'ForeignKey',
      constraintName,
      indexName,
      indexColNames,
      reference,
    };
  },

  FullTextIndex(indexName: string | null, indexColNames: Array<IndexColName>): FullTextIndex {
    invariant(
      indexName === null || typeof indexName === 'string',
      `Invalid value for "indexName" arg in "FullTextIndex" call.\nExpected: string?\nGot:      ${JSON.stringify(
        indexName,
      )}`,
    );

    invariant(
      Array.isArray(indexColNames) &&
        indexColNames.length > 0 &&
        indexColNames.every((item) => item._kind === 'IndexColName'),
      `Invalid value for "indexColNames" arg in "FullTextIndex" call.\nExpected: IndexColName+\nGot:      ${JSON.stringify(
        indexColNames,
      )}`,
    );

    return {
      _kind: 'FullTextIndex',
      indexName,
      indexColNames,
    };
  },

  GeneratedDefinition(expr: Expression, mode: GeneratedColumnMode): GeneratedDefinition {
    invariant(
      isExpression(expr),
      `Invalid value for "expr" arg in "GeneratedDefinition" call.\nExpected: @Expression\nGot:      ${JSON.stringify(
        expr,
      )}`,
    );

    return {
      _kind: 'GeneratedDefinition',
      type: 'generated',
      expr,
      mode,
    };
  },

  Identifier(name: string): Identifier {
    invariant(
      typeof name === 'string',
      `Invalid value for "name" arg in "Identifier" call.\nExpected: string\nGot:      ${JSON.stringify(name)}`,
    );

    return {
      _kind: 'Identifier',
      name,
    };
  },

  Index(indexName: string | null, indexColNames: Array<IndexColName>): Index {
    invariant(
      indexName === null || typeof indexName === 'string',
      `Invalid value for "indexName" arg in "Index" call.\nExpected: string?\nGot:      ${JSON.stringify(indexName)}`,
    );

    invariant(
      Array.isArray(indexColNames) &&
        indexColNames.length > 0 &&
        indexColNames.every((item) => item._kind === 'IndexColName'),
      `Invalid value for "indexColNames" arg in "Index" call.\nExpected: IndexColName+\nGot:      ${JSON.stringify(
        indexColNames,
      )}`,
    );

    return {
      _kind: 'Index',
      indexName,
      indexColNames,
    };
  },

  IndexColName(colName: string, len: number | null = null, direction: Direction | null = null): IndexColName {
    invariant(
      typeof colName === 'string',
      `Invalid value for "colName" arg in "IndexColName" call.\nExpected: string\nGot:      ${JSON.stringify(colName)}`,
    );

    invariant(
      len === null || typeof len === 'number',
      `Invalid value for "len" arg in "IndexColName" call.\nExpected: number?\nGot:      ${JSON.stringify(len)}`,
    );

    return {
      _kind: 'IndexColName',
      colName,
      len,
      direction,
    };
  },

  Int(length: number, unsigned: boolean): Int {
    invariant(
      typeof length === 'number',
      `Invalid value for "length" arg in "Int" call.\nExpected: number\nGot:      ${JSON.stringify(length)}`,
    );

    invariant(
      typeof unsigned === 'boolean',
      `Invalid value for "unsigned" arg in "Int" call.\nExpected: boolean\nGot:      ${JSON.stringify(unsigned)}`,
    );

    return {
      _kind: 'Int',
      baseType: 'int',
      length,
      unsigned,
    };
  },

  Json(): Json {
    return {
      _kind: 'Json',
      baseType: 'json',
    };
  },

  Literal(value: mixed): Literal {
    return {
      _kind: 'Literal',
      value,
    };
  },

  LongBlob(): LongBlob {
    return {
      _kind: 'LongBlob',
      baseType: 'longblob',
    };
  },

  LongText(encoding: Encoding | null = null): LongText {
    return {
      _kind: 'LongText',
      baseType: 'longtext',
      encoding,
    };
  },

  MediumBlob(): MediumBlob {
    return {
      _kind: 'MediumBlob',
      baseType: 'mediumblob',
    };
  },

  MediumInt(length: number, unsigned: boolean): MediumInt {
    invariant(
      typeof length === 'number',
      `Invalid value for "length" arg in "MediumInt" call.\nExpected: number\nGot:      ${JSON.stringify(length)}`,
    );

    invariant(
      typeof unsigned === 'boolean',
      `Invalid value for "unsigned" arg in "MediumInt" call.\nExpected: boolean\nGot:      ${JSON.stringify(unsigned)}`,
    );

    return {
      _kind: 'MediumInt',
      baseType: 'mediumint',
      length,
      unsigned,
    };
  },

  MediumText(encoding: Encoding | null = null): MediumText {
    return {
      _kind: 'MediumText',
      baseType: 'mediumtext',
      encoding,
    };
  },

  PrimaryKey(indexColNames: Array<IndexColName>): PrimaryKey {
    invariant(
      Array.isArray(indexColNames) &&
        indexColNames.length > 0 &&
        indexColNames.every((item) => item._kind === 'IndexColName'),
      `Invalid value for "indexColNames" arg in "PrimaryKey" call.\nExpected: IndexColName+\nGot:      ${JSON.stringify(
        indexColNames,
      )}`,
    );

    return {
      _kind: 'PrimaryKey',
      indexColNames,
    };
  },

  ReferenceDefinition(
    tblName: string,
    indexColNames: Array<IndexColName>,
    matchMode: MatchMode | null,
    onDelete: ReferenceOption,
    onUpdate: ReferenceOption | null = null,
  ): ReferenceDefinition {
    invariant(
      typeof tblName === 'string',
      `Invalid value for "tblName" arg in "ReferenceDefinition" call.\nExpected: string\nGot:      ${JSON.stringify(
        tblName,
      )}`,
    );

    invariant(
      Array.isArray(indexColNames) &&
        indexColNames.length > 0 &&
        indexColNames.every((item) => item._kind === 'IndexColName'),
      `Invalid value for "indexColNames" arg in "ReferenceDefinition" call.\nExpected: IndexColName+\nGot:      ${JSON.stringify(
        indexColNames,
      )}`,
    );

    return {
      _kind: 'ReferenceDefinition',
      tblName,
      indexColNames,
      matchMode,
      onDelete,
      onUpdate,
    };
  },

  RenameTableStatement(tblName: string, newName: string): RenameTableStatement {
    invariant(
      typeof tblName === 'string',
      `Invalid value for "tblName" arg in "RenameTableStatement" call.\nExpected: string\nGot:      ${JSON.stringify(
        tblName,
      )}`,
    );

    invariant(
      typeof newName === 'string',
      `Invalid value for "newName" arg in "RenameTableStatement" call.\nExpected: string\nGot:      ${JSON.stringify(
        newName,
      )}`,
    );

    return {
      _kind: 'RenameTableStatement',
      tblName,
      newName,
    };
  },

  SmallInt(length: number, unsigned: boolean): SmallInt {
    invariant(
      typeof length === 'number',
      `Invalid value for "length" arg in "SmallInt" call.\nExpected: number\nGot:      ${JSON.stringify(length)}`,
    );

    invariant(
      typeof unsigned === 'boolean',
      `Invalid value for "unsigned" arg in "SmallInt" call.\nExpected: boolean\nGot:      ${JSON.stringify(unsigned)}`,
    );

    return {
      _kind: 'SmallInt',
      baseType: 'smallint',
      length,
      unsigned,
    };
  },

  TableOptions(
    AUTO_INCREMENT: number | null = null,
    ENGINE: string | null = null,
    CHARSET: string | null = null,
    COLLATE: string | null = null,
  ): TableOptions {
    invariant(
      AUTO_INCREMENT === null || typeof AUTO_INCREMENT === 'number',
      `Invalid value for "AUTO_INCREMENT" arg in "TableOptions" call.\nExpected: number?\nGot:      ${JSON.stringify(
        AUTO_INCREMENT,
      )}`,
    );

    invariant(
      ENGINE === null || typeof ENGINE === 'string',
      `Invalid value for "ENGINE" arg in "TableOptions" call.\nExpected: string?\nGot:      ${JSON.stringify(ENGINE)}`,
    );

    invariant(
      CHARSET === null || typeof CHARSET === 'string',
      `Invalid value for "CHARSET" arg in "TableOptions" call.\nExpected: string?\nGot:      ${JSON.stringify(
        CHARSET,
      )}`,
    );

    invariant(
      COLLATE === null || typeof COLLATE === 'string',
      `Invalid value for "COLLATE" arg in "TableOptions" call.\nExpected: string?\nGot:      ${JSON.stringify(
        COLLATE,
      )}`,
    );

    return {
      _kind: 'TableOptions',
      AUTO_INCREMENT,
      ENGINE,
      CHARSET,
      COLLATE,
    };
  },

  Text(encoding: Encoding | null = null): Text {
    return {
      _kind: 'Text',
      baseType: 'text',
      encoding,
    };
  },

  Time(): Time {
    return {
      _kind: 'Time',
      baseType: 'time',
    };
  },

  Timestamp(fsp: number | null = null): Timestamp {
    invariant(
      fsp === null || typeof fsp === 'number',
      `Invalid value for "fsp" arg in "Timestamp" call.\nExpected: number?\nGot:      ${JSON.stringify(fsp)}`,
    );

    return {
      _kind: 'Timestamp',
      baseType: 'timestamp',
      fsp,
    };
  },

  TinyBlob(): TinyBlob {
    return {
      _kind: 'TinyBlob',
      baseType: 'tinyblob',
    };
  },

  TinyInt(length: number, unsigned: boolean): TinyInt {
    invariant(
      typeof length === 'number',
      `Invalid value for "length" arg in "TinyInt" call.\nExpected: number\nGot:      ${JSON.stringify(length)}`,
    );

    invariant(
      typeof unsigned === 'boolean',
      `Invalid value for "unsigned" arg in "TinyInt" call.\nExpected: boolean\nGot:      ${JSON.stringify(unsigned)}`,
    );

    return {
      _kind: 'TinyInt',
      baseType: 'tinyint',
      length,
      unsigned,
    };
  },

  UnaryExpression(op: UnaryOp, expr: Expression): UnaryExpression {
    invariant(
      isExpression(expr),
      `Invalid value for "expr" arg in "UnaryExpression" call.\nExpected: @Expression\nGot:      ${JSON.stringify(
        expr,
      )}`,
    );

    return {
      _kind: 'UnaryExpression',
      op,
      expr,
    };
  },

  UniqueIndex(
    constraintName: string | null,
    indexName: string | null,
    indexColNames: Array<IndexColName>,
  ): UniqueIndex {
    invariant(
      constraintName === null || typeof constraintName === 'string',
      `Invalid value for "constraintName" arg in "UniqueIndex" call.\nExpected: string?\nGot:      ${JSON.stringify(
        constraintName,
      )}`,
    );

    invariant(
      indexName === null || typeof indexName === 'string',
      `Invalid value for "indexName" arg in "UniqueIndex" call.\nExpected: string?\nGot:      ${JSON.stringify(
        indexName,
      )}`,
    );

    invariant(
      Array.isArray(indexColNames) &&
        indexColNames.length > 0 &&
        indexColNames.every((item) => item._kind === 'IndexColName'),
      `Invalid value for "indexColNames" arg in "UniqueIndex" call.\nExpected: IndexColName+\nGot:      ${JSON.stringify(
        indexColNames,
      )}`,
    );

    return {
      _kind: 'UniqueIndex',
      constraintName,
      indexName,
      indexColNames,
    };
  },

  VarBinary(length: number): VarBinary {
    invariant(
      typeof length === 'number',
      `Invalid value for "length" arg in "VarBinary" call.\nExpected: number\nGot:      ${JSON.stringify(length)}`,
    );

    return {
      _kind: 'VarBinary',
      baseType: 'varbinary',
      length,
    };
  },

  VarChar(length: number, encoding: Encoding | null = null): VarChar {
    invariant(
      typeof length === 'number',
      `Invalid value for "length" arg in "VarChar" call.\nExpected: number\nGot:      ${JSON.stringify(length)}`,
    );

    return {
      _kind: 'VarChar',
      baseType: 'varchar',
      length,
      encoding,
    };
  },

  Year(): Year {
    return {
      _kind: 'Year',
      baseType: 'year',
    };
  },

  // Node groups
  isNode,
  isAlterSpec,
  isBytes,
  isCreateTableDefinition,
  isDataType,
  isDefaultValue,
  isExpression,
  isInteger,
  isNumeric,
  isReal,
  isStart,
  isStatement,
  isTemporal,
  isTextual,
  isTextualOrEnum,
};
